services:
  supertokens:
    image: registry.supertokens.io/supertokens/supertokens-postgresql:10.1.3
    depends_on:
      postgres-supertokens:
        condition: service_healthy
    ports:
      - "3567:3567"
    environment:
      # Use the db2 service name here to point to the dedicated SuperTokens DB
      POSTGRESQL_CONNECTION_URI: "postgresql://postgres:postgres@postgres-supertokens:5432/supertokens"
      API_KEYS: ${SUPERTOKENS_API_KEY}
    networks:
      - heartly-backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:3567/hello || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5



  postgres-nestjs:
    image: postgres:16
    container_name: postgres-nestjs
    restart: always
    volumes:
      - postgres_nestjs:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: nestjs_api
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      TZ: "UTC"
    ports:
      - "25432:5432"
    networks:
      - heartly-backend-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-supertokens:
    image: postgres:16
    container_name: postgres-supertokens
    restart: always
    volumes:
      - postgres_supertokens:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: supertokens
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      TZ: "UTC"
    ports:
      - "25433:5432"
    networks:
      - heartly-backend-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis/redis-stack:latest   
    restart: always
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
    environment:
      REDIS_ARGS: "--requirepass redispass"
    networks:
      - heartly-backend-network

  maildev:
    build:
      context: .
      dockerfile: maildev.Dockerfile
    ports:
      - ${MAIL_CLIENT_PORT}:1080
      - ${MAIL_PORT}:1025
    networks:
      - heartly-backend-network

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    ports:
      - "18080:80"
    volumes:
      - pgadmin_data:/root/.pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: 12345678
      PGADMIN_CONFIG_WTF_CSRF_ENABLED: "False"
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: "False"
    networks:
      - heartly-backend-network

volumes:
  pgadmin_data:
  redis_data:
  postgres_nestjs:
  postgres_supertokens:

networks:
  heartly-backend-network:
    driver: bridge
